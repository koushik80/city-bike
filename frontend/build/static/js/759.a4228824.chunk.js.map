{"version":3,"file":"static/js/759.a4228824.chunk.js","mappings":"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","sources":["pages/Contact.js"],"sourcesContent":["import { Button, Card, CardActions, CardContent, CardHeader, Container, FormControl, Grid, InputLabel, MenuItem, Select, TextField } from '@mui/material'\nimport { Form, Formik } from 'formik'\nimport React, { useState } from 'react'\nimport * as Yup from 'yup'\nimport './Contact.scss'\n\n//Data\nconst initialValues = {\n  firstName: '',\n  lastName: '',\n  occupation: '',\n  email: '',\n  message: '',\n  subject: '',\n}\n\nconst options = [\n  { label: 'Computer Programmer', value: 'Computer_programmer' },\n  { label: 'Web Developer', value: 'web_developer' },\n  { label: 'User Experience Designer', value: 'user_experience_designer' },\n  { label: 'Systems Analyst', value: 'systems_analyst' },\n  { label: 'Quality Assurance Tester', value: 'quality_assurance_tester' },\n]\n\n//validation schema\nlet validationSchema = Yup.object().shape({\n  firstName: Yup.string().required('Required'),\n  lastName: Yup.string().required('Required'),\n  email: Yup.string().email('Invalid email').required('Required'),\n  message: Yup.string().required('Required'),\n  subject: Yup.string().required('Required'),\n})\n\nconst Contact = () => {\n\n  const [submitted, setSubmitted] = useState(false)\n  const [error, setError] = useState('')\n\n  const onSubmit = (values) => {\n    console.log(values)\n\n    // endpoint URL\n    const url = process.env.REACT_APP_FORM_URL\n\n    fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      body: JSON.stringify(values)\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        if (res.code === 200) {\n          setSubmitted(true)\n        } else {\n          setError(res.message)\n        }\n      })\n      .catch((error) => setError(error))\n  }\n\n  let message\n  if (error) {\n    return message = <p>{error}</p>\n  }\n\n  if (submitted) {\n    return message = <p>We have received your message, thank you for contacting!</p>\n  }\n\n  return (\n    <Container className='contact-page'>\n      {message}\n      <Grid container justify=\"center\" spacing={1}>\n        <Grid item xs={12} md={12} lg={12}>\n          <Card>\n            <div className=\"page-title\">\n              <CardHeader title=\"Contact Form\"></CardHeader>\n            </div>\n            <Formik\n              initialValues={initialValues}\n              validationSchema={validationSchema}\n              onSubmit={onSubmit}>\n              {({ dirty, isValid, values, handleChange, handleBlur }) => {\n                console.log('isValid', isValid,dirty)\n                return (\n                  <Form>\n                    <CardContent>\n                      <Grid item container spacing={2} justify=\"center\">\n                        <Grid item xs={12} sm={6} md={6}>\n                          <TextField\n                            label=\"First Name\"\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"firstName\"\n                            value={values.firstName}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item xs={12} sm={6} md={6}>\n                          <TextField\n                            label=\"Last Name\"\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"lastName\"\n                            value={values.lastName}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={6} lg={6}>\n                          <TextField\n                            label=\"Email\"\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"email\"\n                            value={values.email}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                        <Grid item xs={12} md={6} lg={6}>\n                          <FormControl fullWidth variant=\"outlined\">\n                            <InputLabel id=\"demo-simple-select-outlined-label\">\n                                                            Occupation\n                            </InputLabel>\n                            <Select\n                              labelId=\"demo-simple-select-outlined-label\"\n                              id=\"demo-simple-select-outlined\"\n                              label=\"Occupation\"\n                              onChange={handleChange}\n                              onBlur={handleBlur}\n                              value={values.occupation}\n                              name=\"occupation\">\n                              <MenuItem>None</MenuItem>\n                              {options.map((item) => (\n                                <MenuItem key={item.value} value={item.value}>\n                                  {item.label}\n                                </MenuItem>\n                              ))}\n                            </Select>\n                          </FormControl>\n                        </Grid>\n                        <Grid item xs={12}>\n                          <TextField\n                            label=\"Subject\"\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"subject\"\n                            value={values.subject}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n\n                        <Grid item xs={12}>\n                          <TextField\n                            label=\"Message\"\n                            variant=\"outlined\"\n                            fullWidth\n                            name=\"message\"\n                            value={values.message}\n                            type=\"text\"\n                            multiline\n                            rows={3}\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                          />\n                        </Grid>\n                      </Grid>\n                    </CardContent>\n                    <CardActions>\n                      <Button\n                        disabled={!isValid || !dirty}\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"Submit\"\n                      >\n                        Submit\n                      </Button>\n                    </CardActions>\n                  </Form>\n                )\n              }}\n            </Formik>\n          </Card>\n        </Grid>\n      </Grid>\n    </Container>\n  )\n}\n\nexport default Contact"],"names":["initialValues","firstName","lastName","occupation","email","message","subject","options","label","value","validationSchema","Yup","shape","required","useState","submitted","setSubmitted","error","setError","Container","className","Grid","container","justify","spacing","item","xs","md","lg","Card","CardHeader","title","onSubmit","values","console","log","fetch","process","method","headers","Accept","body","JSON","stringify","then","res","json","code","catch","dirty","isValid","handleChange","handleBlur","CardContent","sm","TextField","variant","fullWidth","name","onChange","onBlur","FormControl","InputLabel","id","Select","labelId","MenuItem","map","type","multiline","rows","CardActions","Button","disabled","color"],"sourceRoot":""}